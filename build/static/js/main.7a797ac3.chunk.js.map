{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","Notification","message","type","className","join","Filter","filterText","setFilterText","value","onChange","e","target","PersonForm","newName","newNumber","setNewName","setNewNumber","addNewContact","onSubmit","Persons","persons","onPersonDelete","style","listStyle","marginLeft","paddingLeft","filter","person","name","toLowerCase","includes","map","key","id","number","onClick","App","useState","setPersons","notifications","setNotifications","useEffect","axios","get","then","res","data","addNotification","newNotification","uuid","v4","concat","setTimeout","notification","preventDefault","newPerson","find","confirmMessage","undefined","window","confirm","put","updatePerson","updatedPerson","catch","error","response","post","alert","personToDelete","personId","delete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a797ac3.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAllPersons = () => axios.get(baseUrl).then(res => res.data);\n\nconst createPerson = newPerson =>\n  axios.post(baseUrl, newPerson).then(res => res.data);\n\nconst deletePerson = personId => axios.delete(`${baseUrl}/${personId}`);\n\nconst updatePerson = (id, person) =>\n  axios.put(`${baseUrl}/${id}`, person).then(res => res.data);\n\nexport { getAllPersons, createPerson, deletePerson, updatePerson };\n","import React, { useState, useEffect } from \"react\";\nimport uuid from \"uuid\";\nimport {\n  getAllPersons,\n  createPerson,\n  deletePerson,\n  updatePerson\n} from \"./services/persons\";\n\nconst Notification = ({ message, type }) =>\n  message && <div className={[\"notification\", type].join(\" \")}>{message}</div>;\n\nconst Filter = ({ filterText, setFilterText }) => (\n  <p>\n    filter shown with{\" \"}\n    <input value={filterText} onChange={e => setFilterText(e.target.value)} />\n  </p>\n);\n\nconst PersonForm = ({\n  newName,\n  newNumber,\n  setNewName,\n  setNewNumber,\n  addNewContact\n}) => (\n  <form onSubmit={addNewContact}>\n    <div>\n      name: <input value={newName} onChange={e => setNewName(e.target.value)} />\n    </div>\n    <div>\n      number:{\" \"}\n      <input value={newNumber} onChange={e => setNewNumber(e.target.value)} />\n    </div>\n\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n);\n\nconst Persons = ({ persons, filterText, onPersonDelete }) => (\n  <ul style={{ listStyle: \"none\", marginLeft: \"0\", paddingLeft: \"0\" }}>\n    {persons\n      .filter(person =>\n        person.name.toLowerCase().includes(filterText.toLowerCase())\n      )\n      .map(person => (\n        <li key={person.id}>\n          {person.name} {person.number}{\" \"}\n          <button onClick={() => onPersonDelete(person)}>delete</button>\n        </li>\n      ))}\n  </ul>\n);\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filterText, setFilterText] = useState(\"\");\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    getAllPersons().then(persons => setPersons(persons));\n  }, []);\n\n  const addNotification = (message, type) => {\n    const newNotification = {\n      id: uuid.v4(),\n      message,\n      type\n    };\n\n    setNotifications(notifications.concat(newNotification));\n    setTimeout(() => {\n      setNotifications(notifications =>\n        notifications.filter(\n          notification => notification.id !== newNotification.id\n        )\n      );\n    }, 5000);\n  };\n\n  const addNewContact = e => {\n    e.preventDefault();\n\n    if (!newName || !newNumber) {\n      alert(\"Fill all fields before submitting!\");\n      return;\n    }\n\n    const person = persons.find(person => person.name === newName);\n\n    const confirmMessage = `${newName} is already added to the phone book, replace the old number with a new one?`;\n\n    if (person !== undefined && window.confirm(confirmMessage)) {\n      updatePerson(person.id, { name: newName, number: newNumber })\n        .then(updatedPerson => {\n          setPersons(\n            persons.map(person =>\n              person.id === updatedPerson.id ? updatedPerson : person\n            )\n          );\n\n          addNotification(`Updated ${updatedPerson.name}`, \"warning\");\n        })\n        .catch(error => addNotification(error.response.data.error, \"error\"));\n    } else if (person === undefined) {\n      createPerson({ name: newName, number: newNumber })\n        .then(newPerson => {\n          setPersons(persons.concat(newPerson));\n          addNotification(`Added ${newPerson.name}`, \"success\");\n        })\n        .catch(error => addNotification(error.response.data.error, \"error\"));\n    }\n  };\n\n  const handlePersonDelete = personToDelete => {\n    if (window.confirm(`Delete ${personToDelete.name}?`))\n      deletePerson(personToDelete.id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== personToDelete.id));\n          addNotification(`Deleted ${personToDelete.name}`, \"error\");\n        })\n        .catch(error => addNotification(error.response.data.error, \"error\"));\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <div>\n        {notifications.map(notification => (\n          <Notification\n            key={notification.id}\n            message={notification.message}\n            type={notification.type}\n          />\n        ))}\n      </div>\n\n      <Filter filterText={filterText} setFilterText={setFilterText} />\n\n      <h3>Add a new</h3>\n\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        setNewName={setNewName}\n        setNewNumber={setNewNumber}\n        addNewContact={addNewContact}\n      />\n\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        filterText={filterText}\n        onPersonDelete={handlePersonDelete}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}